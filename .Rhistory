R
version()
getRversion()
cd ..
a <- seq(1, 10, 1)
a
b <- seq(1,10,1)
plot(a, b)
a <- 1:10
a
b <- 1:10
plot(a, b)
plot(a, b, pvh = 16)
plot(a, b, pch = 16)
plot(a, b, pch = 16, col = c(1:10))
install.packages("ggplot2")
library(ggplot2)
install.packages("ade4")
library(ade4)
data("bacteria")
head(bacteria)
data("atlas")
head(atlas)
head(atlas, 1)
str(atlas)
data("cnc2003")
str(cnc2003)
head(cnc2003)
ggplot(cnc2003)
ggplot(cnc2003, aes(entr, sean))
ggplot(cnc2003, aes(entr, sean)) + geom_point()
ggplot(cnc2003, aes(entr, rece)) + geom_point()
install.packages("Seurat")
library(seurat)
library(Seurat)
install.packages("Seurat", dependencies = TRUE)
library(Seurat)
install.packages('irlba')
library(Seurat)
BiocManager::install("SCnorm")
install.packages("gsl")
BiocManager::install("SCnorm")
BiocManager::install("SCnorm")
BiocManager::install("glmGamPoi")
BiocManager::install("glmGamPoi", force = TRUE)
BiocManager::install("SCnorm", force = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "/Users/mscavino/PreprocessingComparison/")
# Centered log ratio features
data_SCGLM <- SCTransform(data, method = "glmGamPoi")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "/Users/mscavino/PreprocessingComparison/")
# Include libraries
library(Seurat)
library(tidyverse)
library(dplyr)
library(stringr)
library(cowplot)
library(viridis)
library(sctransform)
library(glmGamPoi)
# Loading data
seu <- Read10X("data/filtered_feature_bc_matrix/")
data <- CreateSeuratObject(seu)
# Default normalization (Log Normalize)
data_LN <- NormalizeData(data,verbose = FALSE)
data_LN <- FindVariableFeatures(data_LN, selection.method = "vst", nfeatures = 2000, verbose = FALSE)
data_LN <- ScaleData(data_LN,features = rownames(data_LN))
data_LN <- RunPCA(data_LN)
data_LN <- RunTSNE(data_LN)
data_LN <- RunUMAP(data_LN, dims = 1:50)
data_LN <- FindNeighbors(data_LN)
data_LN <- FindClusters(data_LN)
# Centered log ratio features
data_CLR <- NormalizeData(data, verbose = FALSE, normalization.method = "CLR")
data_CLR <- FindVariableFeatures(data_CLR, selection.method = "vst", nfeatures = 2000, verbose = FALSE)
data_CLR <- ScaleData(data_CLR,features = rownames(data_CLR))
data_CLR <- RunPCA(data_CLR)
data_CLR <- RunTSNE(data_CLR)
data_CLR <- RunUMAP(data_CLR, dims = 1:50)
data_CLR <- FindNeighbors(data_CLR)
data_CLR <- FindClusters(data_CLR)
# Centered log ratio features
data_CLRc <- NormalizeData(data, verbose = FALSE, normalization.method = "CLR", margin = 2)
data_CLRc <- FindVariableFeatures(data_CLRc, selection.method = "vst", nfeatures = 2000, verbose = FALSE)
data_CLRc <- ScaleData(data_CLRc,features = rownames(data_CLRc))
data_CLRc <- RunPCA(data_CLRc)
data_CLRc <- RunTSNE(data_CLRc)
data_CLRc <- RunUMAP(data_CLRc, dims = 1:50)
data_CLRc <- FindNeighbors(data_CLRc)
data_CLRc <- FindClusters(data_CLRc)
# Centered log ratio features
data_RC <- NormalizeData(data, verbose = FALSE, normalization.method = "RC", scale.factor = 1e6)
data_RC <- FindVariableFeatures(data_RC, selection.method = "vst", nfeatures = 2000, verbose = FALSE)
data_RC <- ScaleData(data_RC,features = rownames(data_RC))
data_RC <- RunPCA(data_RC)
data_RC <- RunTSNE(data_RC)
data_RC <- RunUMAP(data_RC, dims = 1:50)
data_RC <- FindNeighbors(data_RC)
data_RC <- FindClusters(data_RC)
# Centered log ratio features
data_SC <- SCTransform(data)
# data_SC <- FindVariableFeatures(data_SC, selection.method = "vst", nfeatures = 2000, verbose = FALSE)
# data_SC <- ScaleData(data_SC,features = rownames(data_SC))
data_SC <- RunPCA(data_SC)
data_SC <- RunTSNE(data_SC)
data_SC <- RunUMAP(data_SC, dims = 1:50)
data_SC <- FindNeighbors(data_SC)
data_SC <- FindClusters(data_SC)
# Centered log ratio features
data_SCGLM <- SCTransform(data, method = "glmGamPoi")
# data_SCGLM <- FindVariableFeatures(data_SCGLM, selection.method = "vst", nfeatures = 2000, verbose = FALSE)
# data_SCGLM <- ScaleData(data_SCGLM,features = rownames(data_SCGLM))
data_SCGLM <- RunPCA(data_SCGLM)
data_SCGLM <- RunTSNE(data_SCGLM)
data_SCGLM <- RunUMAP(data_SCGLM, dims = 1:50)
data_SCGLM <- FindNeighbors(data_SCGLM)
data_SCGLM <- FindClusters(data_SCGLM)
default <- DimPlot(data_LN, reduction = "umap")
clrf <- DimPlot(data_CLR, reduction = "umap")
clrc <- DimPlot(data_CLRc, reduction = "umap")
rc <- DimPlot(data_RC, reduction = "umap")
sct <- DimPlot(data_SC, reduction = "umap")
plot_grid(default, clrf, clrc, rc, sct, sctglm, nrow = 2, ncol = 3)
```{r}
sctglm <- DimPlot(data_SCGLM, reduction = "umap")
plot_grid(default, clrf, clrc, rc, sct, sctglm, nrow = 2, ncol = 3)
clrf <- DimPlot(data_CLR, reduction = "umap", label = T) + NoLegend()
clrf <- DimPlot(data_CLR, reduction = "umap", label = T) + NoLegend()
---
CLR CELLS
RC with Count per Million (Pas de log transformation)
SCTransform
```{r}
SCTransform GLM
default <- DimPlot(data_LN, reduction = "umap", label = T) + NoLegend()
clrf <- DimPlot(data_CLR, reduction = "umap", label = T) + NoLegend()
clrc <- DimPlot(data_CLRc, reduction = "umap", label = T) + NoLegend()
rc <- DimPlot(data_RC, reduction = "umap", label = T) + NoLegend()
sct <- DimPlot(data_SC, reduction = "umap", label = T) + NoLegend()
sctglm <- DimPlot(data_SCGLM, reduction = "umap", label = T) + NoLegend()
plot_grid(default, clrf, clrc, rc, sct, sctglm, nrow = 2, ncol = 3)
plot_grid(default, clrf, clrc, rc, sct, sctglm, nrow = 2, ncol = 3, labels = c("Default",
"CLR features", "CLR cells", "Relative count", "SCTransform", "SCtransform glm"))
```{r out.width=10}
plot_grid(default, clrf, clrc, rc, sct, sctglm, nrow = 2, ncol = 3, labels = c("Default",
"CLR features", "CLR cells", "Relative count", "SCTransform", "SCtransform glm"))
```{r out.width=500%}
plot_grid(default, clrf, clrc, rc, sct, sctglm, nrow = 2, ncol = 3, labels = c("Default",
"CLR features", "CLR cells", "Relative count", "SCTransform", "SCtransform glm"))
plot_grid(default, clrf, clrc, rc, sct, sctglm, nrow = 2, ncol = 3, labels = c("Default",
"CLR features", "CLR cells", "Relative count", "SCTransform", "SCtransform glm"))
```{r fig.align="center", fig.width=10, fig.height=7}
plot_grid(default, clrf, clrc, rc, sct, sctglm, nrow = 2, ncol = 3, labels = c("Default",
"CLR features", "CLR cells", "Relative count", "SCTransform", "SCtransform glm"))
markers_LN <- FindAllMarkers(data_LN)
markers_LN <- FindAllMarkers(data_LN, only.pos = T, logfc.threshold = 0.5)
markers_LN <- FindAllMarkers(data_LN, only.pos = T, logfc.threshold = 0.5)
markers_CLR <- FindAllMarkers(data_CLR, only.pos = T, logfc.threshold = 0.5)
markers_CLRc <- FindAllMarkers(data_CLRc, only.pos = T, logfc.threshold = 0.5)
markers_RC <- FindAllMarkers(data_RC, only.pos = T, logfc.threshold = 0.5)
markers_SCT <- FindAllMarkers(data_SC, only.pos = T, logfc.threshold = 0.5)
markers_SCTGLM <- FindAllMarkers(data_SCGLM, only.pos = T, logfc.threshold = 0.5)
install.packages("UpSetR")
library(UpSetR)
mutations <- read.csv( system.file("extdata", "mutations.csv", package = "UpSetR"), header=T, sep = ",")
head(mutations)
head(markers_LN)
summary(markers_LN$p_val_adj)
plot(markers_LN$p_val_adj)
host(markers_LN$p_val_adj)
hist(markers_LN$p_val_adj)
markers_LN <- subset(markers_LN, subset = p_val_adj < 0.05)
markers_SCTGLM <- subset(markers_SCTGLM, subset = p_val_adj < 0.05)
markers_LN <- subset(markers_LN, subset = p_val_adj < 0.05)
markers_CLR <- subset(markers_CLR, subset = p_val_adj < 0.05)
markers_CLRc <- subset(markers_CLRc, subset = p_val_adj < 0.05)
markers_RC <- subset(markers_RC, subset = p_val_adj < 0.05)
markers_SCT <- subset(markers_SCT, subset = p_val_adj < 0.05)
markers_SCTGLM <- subset(markers_SCTGLM, subset = p_val_adj < 0.05)
mutation
mutations
union(markers_LN$gene, markers_CLR$gene, markers_CLRc$gene, markers_RC$gene, markers_SCT$gene, markers_SCTGLM$gene)
test <- union(markers_LN$gene, markers_CLR$gene)
test
all_genes <- union(markers_LN$gene, markers_CLR$gene)
all_genes <- union(all_genes, markers_CLRc$gene)
all_genes <- union(all_genes, markers_RC$gene)
all_genes <- union(all_genes, markers_SCT$gene)
all_genes <- union(all_genes, markers_SCTGLM$gene)
all_genes
length(all_genes)
length(markers_CLR$gene)
length(all_genes)
ln = c()
clr = c()
clrc = c()
rc = c()
sct = c()
sctglm = c()
for (gene in all_genes){
print(gene)
}
ln = c()
clr = c()
clrc = c()
rc = c()
sct = c()
sctglm = c()
for (gene in all_genes){
if (gene %in% markers_LN$gene){ln <- c(ln, 1)}
else {ln <- c(ln, 0)}
if (gene %in% markers_CLR$gene){clr <- c(clr, 1)}
else {clr <- c(clr, 0)}
if (gene %in% markers_CLRc$gene){clrc <- c(clrc, 1)}
else {clrc <- c(clrc, 0)}
if (gene %in% markers_RC$gene){rc <- c(rc, 1)}
else {rc <- c(rc, 0)}
if (gene %in% markers_SCT$gene){sct <- c(sct, 1)}
else {sct <- c(sct, 0)}
if (gene %in% markers_SCTGLM$gene){sctglm <- c(sctglm, 1)}
else {sctglm <- c(sctglm, 0)}
}
df  =data.frame(row.names = all_genes, ln = ln, clrf = clr, clrc = clrc, rc = rc, sct = sct, sctglm = sctglm)
df
mutations
upset(df, sets = c("ln", "clrf", "clrc", "rc", "sct", "sctglm"))
upset(df, sets = c("ln", "clrf", "clrc", "sct", "sctglm"))
upset(df, sets = c("ln", "clrf", "clrc", "rc", "sct", "sctglm"))
```{r include=FALSE}
all_genes <- union(markers_LN$gene, markers_CLR$gene)
all_genes <- union(markers_LN$gene, markers_CLR$gene)
all_genes <- union(all_genes, markers_CLRc$gene)
all_genes <- union(all_genes, markers_SCT$gene)
all_genes <- union(all_genes, markers_SCTGLM$gene)
ln = c()
clr = c()
clrc = c()
sct = c()
sctglm = c()
for (gene in all_genes){
if (gene %in% markers_LN$gene){ln <- c(ln, 1)}
else {ln <- c(ln, 0)}
if (gene %in% markers_CLR$gene){clr <- c(clr, 1)}
else {clr <- c(clr, 0)}
if (gene %in% markers_CLRc$gene){clrc <- c(clrc, 1)}
else {clrc <- c(clrc, 0)}
if (gene %in% markers_SCT$gene){sct <- c(sct, 1)}
else {sct <- c(sct, 0)}
if (gene %in% markers_SCTGLM$gene){sctglm <- c(sctglm, 1)}
else {sctglm <- c(sctglm, 0)}
}
df  =data.frame(row.names = all_genes, ln = ln, clrf = clr, clrc = clrc, sct = sct, sctglm = sctglm)
upset(df, sets = c("ln", "clrf", "clrc", "sct", "sctglm"))
upset(df, sets = c("ln", "clrf", "clrc", "sct", "sctglm"))
upset(df, sets = c("ln", "clrf", "clrc", "sct", "sctglm", sets.bar.color = "#56B4E9",
order.by = "freq"))
upset(df, sets = c("ln", "clrf", "clrc", "sct", "sctglm", sets.bar.color = "#56B4E9",
order.by = "freq"))
mutations
upset(df, sets = c("ln", "clrf", "clrc", "sct", "sctglm"), sets.bar.color = "#56B4E9",
order.by = "freq")
upset(df, sets = c("ln", "clrf", "clrc", "rc", "sct", "sctglm"), sets.bar.color = "#56B4E9",
order.by = "freq")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "/Users/mscavino/PreprocessingComparison/")
# Include libraries
library(Seurat)
library(tidyverse)
library(dplyr)
library(stringr)
library(cowplot)
library(viridis)
library(sctransform)
library(glmGamPoi)
library(UpSetR)
library(shiny)
library(shinyWidgets)
ui <- fluidPage( sliderInput("test", "test", 10, 20, 15))
server <- function(input, output, session){
renderText("test")
}
shinyApp(ui, server)
shiny::runApp('Projet/Dashboard')
if (!require("rstudioapi")) install.packages("rstudioapi")
# Setting working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("modules/Dependencies.R")
runApp('.')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
